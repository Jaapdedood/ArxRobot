<?xml version="1.0" encoding="utf-8"?>
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:components="com.arxterra.components.*"
	xmlns:layouts="com.arxterra.layouts.*"
	creationComplete="_CreationCompleted()"
	addedToStage="_AddedToStage()"
	removedFromStage="_RemovedFromStage()"
	>
	<fx:Metadata>
		[Event(name="debug_clear", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.arxterra.icons.IconBluetooth;
			import com.arxterra.controllers.MotionManager;
			import com.arxterra.controllers.SessionManager;
			
			public var triggerButton:DisplayObject;
			
			// [Bindable]
			// private var _camMgr:CameraManager;
			
			[Bindable]
			private var _motMgr:MotionManager;
			
			[Bindable]
			private var _sessionMgr:SessionManager;
			
			private function _AddedToStage ( ) : void
			{
				stage.addEventListener ( MouseEvent.MOUSE_DOWN, _SandboxMouseDown );
			}
			
			private function _Close ( ) : void
			{
				_sessionMgr.actionMenuOn = false;
			}
			
			private function _CreationCompleted ( ) : void
			{
				_sessionMgr = SessionManager.instance;
				_motMgr = MotionManager.instance;
				_motMgr.addEventListener ( MotionManager.MOTION_ENABLED_CHANGE, _MotMgrEnabledChange );
				_MotMgrEnabledChange ( );
				// _camMgr = CameraManager.instance;
			}
			
			private function _DebugClear ( ) : void
			{
				dispatchEvent ( new Event ( 'debug_clear' ) );
			}
			
			private function _ExitQuery ( ) : void
			{
				_sessionMgr.exitQuery ( );
			}
			
			private function _MotMgrEnabledChange ( event:Event = null ) : void
			{
				if ( _motMgr.enabled )
				{
					currentState = 'rc';
				}
				else
				{
					currentState = 'normal';
				}
			}
			
			private function _RemovedFromStage ( ) : void
			{
				stage.removeEventListener ( MouseEvent.MOUSE_DOWN, _SandboxMouseDown );
			}
			
			private function _SandboxMouseDown ( event:Event ) : void
			{
				var doTarget:DisplayObject = DisplayObject ( event.target );
				if ( !DisplayObjectContainer ( this ).contains ( doTarget ) )
				{
					if ( triggerButton != doTarget )
					{
						event.stopPropagation ( );
						callLater ( _Close );
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal" />
		<s:State name="rc" />
	</s:states>
	<s:Rect
		width="100%" height="100%"
		>
		<s:stroke>
			<s:SolidColorStroke
				color="{_sessionMgr.actionMenuBgColor}"
				/>
		</s:stroke>
		<s:fill>
			<s:SolidColor
				color="{_sessionMgr.actionMenuBgColor}"
				/>
		</s:fill>
	</s:Rect>
	<s:VGroup
		gap="0"
		width="{width}"
		>
		<s:Group
			id="gpMenuBtns"
			width="{width}"
			>
			<s:layout>
				<layouts:FlowLayoutH
					horizontalGap="4" verticalGap="4"
					/>
			</s:layout>
			<components:ControlModesMenu
				id="mnControlModes"
				visible="{_sessionMgr.motMgrEnabledPortrait}"
				includeInLayout="{_sessionMgr.motMgrEnabledPortrait}"
				includeIn="rc"
				itemDestructionPolicy="auto"
				/>
			<components:HandPrefsMenu
				id="mnHandPrefs"
				visible="{_sessionMgr.motMgrEnabledPortrait}"
				includeInLayout="{_sessionMgr.motMgrEnabledPortrait}"
				includeIn="rc"
				itemDestructionPolicy="auto"
				/>
			<components:RobotCamInfo
				id="rcInfo"
				visible="{_sessionMgr.camMgrEnabledPortrait}"
				includeInLayout="{_sessionMgr.camMgrEnabledPortrait}"
				/>
			<s:Button
				id="btnExit"
				styleName="navExit"
				visible="{_sessionMgr.osAllowsExit}"
				includeInLayout="{_sessionMgr.osAllowsExit}"
				click="_ExitQuery()"
				/>
			<s:Button
				id="btnSleepWake"
				styleName="{_sessionMgr.isSleeping?'navWake':'navSleep'}"
				click="_sessionMgr.sleepWakeToggle()"
				/>
			<components:SettingsMenu
				id="mnSettings"
				/>
			<components:InfoMenu
				id="mnInfo"
				/>
			<s:Button
				id="btnBLE"
				styleName="nav"
				horizontalCenter="0"
				verticalCenter="0"
				icon="{IconBluetooth}"
				color="{_sessionMgr.bleManager.iconColorBlink || 0xcccccc}"
				click="_sessionMgr.bleConfigToggle()"
				visible="{_sessionMgr.bleSelected}"
				includeInLayout="{_sessionMgr.bleSelected}"
				/>
			<s:Button
				id="btnBluetooth"
				styleName="nav"
				horizontalCenter="0"
				verticalCenter="0"
				icon="{IconBluetooth}"
				color="{_sessionMgr.mcuBluetooth.iconColorBlink || 0x999999}"
				click="_sessionMgr.bluetoothConfigToggle()"
				visible="{_sessionMgr.bluetoothSelected}"
				includeInLayout="{_sessionMgr.bluetoothSelected}"
				/>
			<components:MotorTune
				id="coMotorTune"
				includeIn="rc"
				itemDestructionPolicy="auto"
				/>
			<s:VGroup
				gap="4"
				horizontalAlign="center"
				verticalAlign="bottom"
				paddingLeft="4"
				paddingRight="4"
				>
				<s:Label
					paddingTop="4"
					styleName="toggleLabel"
					text="{resourceManager.getString('default','expert_mode_btn_label')}"
					verticalAlign="bottom"
					/>
				<s:ToggleSwitch
					id="btnExpert"
					change="_sessionMgr.expertModeToggle()"
					selected="{_sessionMgr.expertModeOn}"
					/>
			</s:VGroup>
			<components:HelpLabel
				id="tipExpert"
				visible="{!_sessionMgr.expertModeOn}"
				includeInLayout="{!_sessionMgr.expertModeOn}"
				buttonPinVertical="bottom"
				popupPinVertical="top"
				resourceNameOrText="expert_mode_btn_tip"
				/>
			<s:VGroup
				gap="4"
				horizontalAlign="center"
				verticalAlign="bottom"
				paddingLeft="4"
				paddingRight="4"
				visible="{_sessionMgr.expertModeOn}"
				includeInLayout="{_sessionMgr.expertModeOn}"
				>
				<s:Label
					paddingTop="4"
					styleName="toggleLabel"
					text="{resourceManager.getString('default','debug_vis_btn_label')}"
					verticalAlign="bottom"
					/>
				<s:ToggleSwitch
					id="btnDebugVis"
					selected="@{_sessionMgr.debugVisible}"
					/>
			</s:VGroup>
			<s:VGroup
				gap="4"
				horizontalAlign="center"
				verticalAlign="bottom"
				paddingLeft="4"
				paddingRight="4"
				visible="{_sessionMgr.debugVisible}"
				includeInLayout="{_sessionMgr.debugVisible}"
				>
				<s:Label
					paddingTop="4"
					styleName="toggleLabel"
					text="{resourceManager.getString('default','debug_btn_label')}"
					verticalAlign="bottom"
					/>
				<s:ToggleSwitch
					id="btnDebug"
					selected="@{_sessionMgr.debugOn}"
					/>
			</s:VGroup>
			<s:Button
				id="btnDebugClr"
				styleName="nav"
				visible="{_sessionMgr.debugVisible}"
				includeInLayout="{_sessionMgr.debugVisible}"
				label="{resourceManager.getString('default','debug_clear_btn_label')}"
				click="_DebugClear()"
				/>
		</s:Group>
		<s:Spacer
			height="4"
			/>
		<!-- TESTING 
		<s:HSlider
			id="hsldrCleanTest"
			width="95%"
			minimum="0"
			maximum="100"
			value="{_sessionMgr.batteryCleanPct}"
			stepSize="1"
			snapInterval="1"
			thumbRelease="_sessionMgr.batteryCleanPctTest(hsldrCleanTest.value)"
			/>
		<s:HSlider
			id="hsldrDirtyTest"
			width="95%"
			minimum="0"
			maximum="100"
			value="{_sessionMgr.batteryDirtyPct}"
			stepSize="1"
			snapInterval="1"
			thumbRelease="_sessionMgr.batteryDirtyPctTest(hsldrDirtyTest.value)"
			/>
		-->
	</s:VGroup>
</s:Group>
