<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:components="com.arxterra.components.*"
	xmlns:layouts="com.arxterra.layouts.*"
	styleName="sView"
	addedToStage="_Init()"
	creationComplete="_Init()"
	removedFromStage="_Dismiss()"
	>
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.bluetooth.BluetoothDevice;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			
			import spark.layouts.HorizontalLayout;
			import spark.layouts.VerticalLayout;
			import spark.layouts.supportClasses.LayoutBase;
			
			import com.arxterra.controllers.SessionManager;
			
			import com.arxterra.events.UtilityEvent;
			
			import com.arxterra.icons.IconBluetooth;
			
			import com.arxterra.utils.McuConnectorBluetooth;
			
			private var _bInited:Boolean = false;
			private var _bPortrait:Boolean = false;
			private var _cwPortrait:ChangeWatcher;
			[Bindable]
			private var _lbBtns:LayoutBase;
			[Bindable]
			private var _mcuConnBluetooth:McuConnectorBluetooth;
			[Bindable]
			private var _sessionMgr:SessionManager;
			
			private function _AspectApply ( ) : void
			{
				if ( _bPortrait )
				{
					var vl:VerticalLayout = new VerticalLayout ( );
					vl.gap = _sessionMgr.guiGap;
					_lbBtns = vl as LayoutBase;
				}
				else
				{
					var hl:HorizontalLayout = new HorizontalLayout ( );
					hl.gap = _sessionMgr.guiGap;
					_lbBtns = hl as LayoutBase;
				}
			}
			
			private function _Connect ( ) : void
			{
				var dev:BluetoothDevice = lstDevs.selectedItem as BluetoothDevice;
				if ( dev != null )
					_mcuConnBluetooth.connect ( dev );
			}
			
			private function _Connected ( event:UtilityEvent ) : void
			{
				_DeviceListRefresh ( );
				_sessionMgr.bluetoothConfigSuccess ( );
			}
			
			private function _DeviceListRefresh ( ) : void
			{
				lstDevs.dataProvider = null;
				lstDevs.dataProvider = _mcuConnBluetooth.pairedList;
			}
			
			private function _Disconnect ( ) : void
			{
				_mcuConnBluetooth.disconnect ( );
			}
			
			private function _Disconnected ( event:UtilityEvent ) : void
			{
				_DeviceListRefresh ( );
			}
			
			private function _DisconnectQueue ( ) : void
			{
				_sessionMgr.userState.bluetoothAddress = '';
				callLater ( _Disconnect );
			}
			
			private function _Dismiss ( ) : void
			{
				if ( !_bInited )
					return;
				
				_bInited = false;
				
				if ( _cwPortrait )
					_cwPortrait.unwatch ( );
				
				_EventListenersRemove ( );
			}
			
			private function _Done ( ) : void
			{
				_sessionMgr.bluetoothConfigDone ( );
			}
			
			private function _EventListenersAdd ( ) : void
			{
				_mcuConnBluetooth.addEventListener ( UtilityEvent.BLUETOOTH_CONNECTED, _Connected );
				_mcuConnBluetooth.addEventListener ( UtilityEvent.BLUETOOTH_DISCONNECTED, _Disconnected );
			}
			
			private function _EventListenersRemove ( ) : void
			{
				_mcuConnBluetooth.removeEventListener ( UtilityEvent.BLUETOOTH_CONNECTED, _Connected );
				_mcuConnBluetooth.removeEventListener ( UtilityEvent.BLUETOOTH_DISCONNECTED, _Disconnected );
			}
			
			private function _Init ( ) : void
			{
				if ( _bInited )
					return;
				
				_bInited = true;
				_sessionMgr = SessionManager.instance;
				_mcuConnBluetooth = _sessionMgr.mcuBluetooth;
				
				if ( !_cwPortrait )
				{
					// Initialize layout
					_bPortrait = _sessionMgr.orientedPortrait;
					_AspectApply ( );
					// watch orientedPortrait for changes
					_cwPortrait = BindingUtils.bindSetter ( _PortraitChanged, _sessionMgr, 'orientedPortrait' );
				}
				
				_EventListenersAdd ( );
			}
			
			private function _PortraitChanged ( value:Boolean ) : void
			{
				_bPortrait = value;
				_AspectApply ( );
			}
			
			private function _SystemOpen ( ) : void
			{
				_sessionMgr.mcuBluetooth.systemSettingsOpen ( );
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	<s:VGroup
		gap="6"
		horizontalAlign="center"
		height="100%" width="100%"
		>
		<s:Label
			styleName="textHead"
			text="{resourceManager.getString('default','bt_config_title')}"
			/>
		<s:Group
			height="100%" width="100%"
			>
			<s:Rect
				left="1" right="1"
				top="1" bottom="1"
				>
				<s:stroke>
					<s:SolidColorStroke
						color="0x666666" weight="1"
						/>
				</s:stroke>
			</s:Rect>
			<s:Scroller
				left="2" right="2"
				top="2" bottom="2"
				>
				<s:Group
					width="100%"
					enabled="{!_mcuConnBluetooth.isConnecting}"
					>
					<s:layout>
						<s:ConstraintLayout>
							<s:constraintColumns>
								<s:ConstraintColumn id="colLgap" width="{_sessionMgr.guiGap}" />
								<s:ConstraintColumn id="colL" />
								<s:ConstraintColumn id="colRgap" width="{_sessionMgr.guiGap}" />
								<s:ConstraintColumn id="colR" width="100%" />
								<s:ConstraintColumn id="colEndGap" width="{_sessionMgr.guiGap}" />
							</s:constraintColumns>
							<s:constraintRows>
								<s:ConstraintRow id="rowScan" />
								<s:ConstraintRow id="rowDevs" />
								<s:ConstraintRow id="rowBtns1gap" height="{_sessionMgr.guiGap}" />
								<s:ConstraintRow id="rowBtns1" />
								<s:ConstraintRow id="rowBtns2gap" height="{_sessionMgr.guiGap}" />
								<s:ConstraintRow id="rowBtns2" />
								<s:ConstraintRow id="rowEndGap" height="{_sessionMgr.guiGap}" />
							</s:constraintRows>
						</s:ConstraintLayout>
					</s:layout>
					<!-- Scanning toggle -->
					<s:Label
						id="lbTogScan"
						top="rowScan:0" bottom="rowScan:0"
						left="colL:0" right="colL:0"
						styleName="textConfigItem"
						text="{resourceManager.getString('default','bt_scanning_label')}"
						/>
					<s:ToggleSwitch
						id="btnTogScan"
						top="rowScan:0" bottom="rowScan:0"
						left="colR:0"
						selected="{_sessionMgr.mcuBluetooth.isScanning}"
						click="_sessionMgr.mcuBluetooth.toggleScan()"
						/>
					<!-- Device list -->
					<s:Label
						id="lbDevs"
						top="rowDevs:0" bottom="rowDevs:0"
						left="colL:0" right="colL:0"
						styleName="textConfigItem"
						text="{resourceManager.getString('default','bt_devices_label')}"
						/>
					<s:Group
						top="rowDevs:0" bottom="rowDevs:0"
						left="colR:0" right="colR:0"
						>
						<s:Rect
							left="0" right="0"
							top="0" bottom="0"
							>
							<s:stroke>
								<s:SolidColorStroke
									color="0x666666" weight="1"
									/>
							</s:stroke>
						</s:Rect>
						<s:List
							id="lstDevs"
							left="2" right="2"
							top="2" bottom="2"
							dataProvider="{_sessionMgr.mcuBluetooth.pairedList}"
							itemRenderer="com.arxterra.components.BluetoothListItemRenderer"
							verticalScrollPolicy="off"
							>
							<s:layout>
								<s:VerticalLayout
									gap="0"
									horizontalAlign="contentJustify"
									variableRowHeight="true"
									/>
							</s:layout>
						</s:List>
					</s:Group>
					<s:Group
						top="rowBtns1:0" bottom="rowBtns1:0"
						left="colL:0" right="colR:0"
						width="100%" height="100%"
						layout="{_lbBtns}"
						>
						<s:Button
							id="btnConnect"
							width="100%"
							label="{resourceManager.getString('default','bt_connect_btn_label')}"
							enabled="{lstDevs.selectedItem != null}"
							click="_Connect()"
							/>
						<s:Button
							id="btnDisconnect"
							width="100%"
							label="{resourceManager.getString('default','bt_disconnect_btn_label')}"
							enabled="{_sessionMgr.mcuBluetooth.isConnected}"
							click="_DisconnectQueue()"
							/>
					</s:Group>
					<s:Button
						id="btnSysConfig"
						top="rowBtns2:0" bottom="rowBtns2:0"
						left="colL:0" right="colR:0"
						icon="{IconBluetooth}"
						color="{_sessionMgr.mcuBluetooth.iconColor}"
						label="{resourceManager.getString('default','bt_system_btn_label')}"
						click="_SystemOpen()"
						/>
					<!-- bottom and right spacer -->
					<s:Spacer
						top="rowEndGap:0" bottom="rowEndGap:0"
						left="colEndGap:0" right="colEndGap:0"
						width="{_sessionMgr.guiGap}"
						height="{_sessionMgr.guiGap}"
						/>
				</s:Group>
			</s:Scroller>
		</s:Group>
		<s:Button
			id="btnDone"
			styleName="done"
			label="{resourceManager.getString('default','done_btn_label')}"
			click="_Done()"
			/>
	</s:VGroup>
	<s:BusyIndicator
		horizontalCenter="0" verticalCenter="0"
		visible="{_mcuConnBluetooth.isConnecting}"
		includeInLayout="{_mcuConnBluetooth.isConnecting}"
		/>
</s:SkinnableContainer>
