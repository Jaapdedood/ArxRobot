<?xml version="1.0" encoding="utf-8"?>
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:comp="components.*"
	creationComplete="_Initialized()"
	removedFromStage="_Dismissed()"
	>
	
	<fx:Metadata>
		<![CDATA[ 
		[Event(name="monitor_full_toggle", type="events.UtilityEvent")]
		[Event(name="monitor_toggle", type="events.UtilityEvent")]
		]]>
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			
			import assets.icons.IconArrowDown;
			
			import components.ThinCallout;
			
			import events.UtilityEvent;
			
			[Bindable]
			public var camera:Camera;
			
			[Bindable]
			public var monitorLiveCast:Boolean;
			
			[Bindable]
			public var monitorLiveCastFull:Boolean;
			
			[Bindable]
			private var _cfDropDown:ClassFactory;
			
			private var _timer:Timer;
			
			private function _Dismissed ( ) : void
			{
				_timer.removeEventListener ( TimerEvent.TIMER, _PollStats );
				_timer.stop();
				_timer = null;
			}
			
			private function _Initialized ( ) : void
			{
				var cf:ClassFactory = new ClassFactory ( components.ThinCallout );
				cf.properties = { styleName: 'thinCallout' };
				_cfDropDown = cf;
				_timer = new Timer ( 2000, 0 );
				_timer.addEventListener ( TimerEvent.TIMER, _PollStats );
				_timer.start();
				lblWdDisp.text = String ( camera.width );
				lblHtDisp.text = String ( camera.height );
				callLater ( _PollStats );
			}
			
			private function _MonitorFullToggle ( ) : void
			{
				dispatchEvent ( new UtilityEvent ( UtilityEvent.MONITOR_FULL_TOGGLE ) );
			}
			
			private function _MonitorToggle ( ) : void
			{
				dispatchEvent ( new UtilityEvent ( UtilityEvent.MONITOR_TOGGLE ) );
			}
			
			private function _PollStats ( event:TimerEvent = null ) : void
			{
				lblFpsDisp.text = String ( camera.currentFPS );
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	<s:CalloutButton
		id="cbCamInfo"
		styleName="sButtonLeftAlign"
		icon="{IconArrowDown}"
		label="{resourceManager.getString('default','camera_label')}"
		dropDown="{_cfDropDown}"
		horizontalPosition="after"
		verticalPosition="start"
		>
		<s:HGroup
			gap="16"
			verticalAlign="bottom"
			>
			<s:VGroup
				gap="8"
				horizontalAlign="center"
				>
				<s:ToggleSwitch
					id="swchMonitor"
					change="_MonitorToggle()"
					selected="{monitorLiveCast}"
					/>
				<s:Label
					id="lblMonitor"
					text="{resourceManager.getString('default','camera_display_label')}"
					/>
			</s:VGroup>
			<s:VGroup
				gap="8"
				horizontalAlign="center"
				>
				<s:ToggleSwitch
					id="swchFull"
					change="_MonitorFullToggle()"
					selected="{monitorLiveCastFull}"
					/>
				<s:Label
					id="lblFull"
					text="{resourceManager.getString('default','camera_full_label')}"
					/>
			</s:VGroup>
			<s:VGroup
				gap="8"
				horizontalAlign="center"
				>
				<s:Label
					id="lblWdDisp"
					styleName="textHead"
					/>
				<s:Label
					id="lblWd"
					text="{resourceManager.getString('default','camera_width_label')}"
					/>
			</s:VGroup>
			<s:VGroup
				gap="8"
				horizontalAlign="center"
				>
				<s:Label
					id="lblHtDisp"
					styleName="textHead"
					/>
				<s:Label
					id="lblHt"
					text="{resourceManager.getString('default','camera_width_label')}"
					/>
			</s:VGroup>
			<s:VGroup
				gap="8"
				horizontalAlign="center"
				>
				<s:Label
					id="lblFpsDisp"
					styleName="textHead"
					/>
				<s:Label
					id="lblFps"
					text="{resourceManager.getString('default','camera_fps_label')}"
					/>
			</s:VGroup>
		</s:HGroup>	
	</s:CalloutButton>
	
</s:Group>
