<s:Skin
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	alpha.disabled="0.5"
	initialize="_Initialized()"
	>
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("components.Tip")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.DPIClassification;
			import mx.core.FlexGlobals;
			
			private var borderThickness:Number = 0;
			private var cornerRadius:Number = 0;
			//			private var dropShadowBlur:Number = 0;
			//			private var dropShadowDistance:Number = 0;
			private var margin:Number = 0;
			
			private function _Initialized (  ) : void
			{
				switch (FlexGlobals.topLevelApplication.applicationDPI)
				{
					case DPIClassification.DPI_640:
					{
						borderThickness = 4;
						cornerRadius = 24;
						//						dropShadowBlur = 16;
						//						dropShadowDistance = 8;
						margin = 24
						
						break;
					}
					case DPIClassification.DPI_480:
					{
						borderThickness = 3;
						cornerRadius = 18;
						//						dropShadowBlur = 8;
						//						dropShadowDistance = 6;
						margin = 18
						
						break;
					}
					case DPIClassification.DPI_320:
					{
						borderThickness = 2;
						cornerRadius = 12;
						//						dropShadowBlur = 8;
						//						dropShadowDistance = 4;
						margin = 12
						
						break;
					}
					case DPIClassification.DPI_240:
					{
						borderThickness = 1;
						cornerRadius = 9;
						//						dropShadowBlur = 4;
						//						dropShadowDistance = 3;
						margin = 9;
						
						break;
					}
					default:
					{
						// default DPI_160
						borderThickness = 1;
						cornerRadius = 6;
						//						dropShadowBlur = 4;
						//						dropShadowDistance = 2;
						margin = 6;
						
						break;
					}
				}
				
			}
			
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				// Push backgroundColor and backgroundAlpha directly.
				// Handle undefined backgroundColor by hiding the background object.
				if (isNaN(getStyle("backgroundColor")))
				{
					background.visible = false;
				}
				else
				{
					background.visible = true;
					bgFill.color = getStyle("backgroundColor");
					bgFill.alpha = getStyle("backgroundAlpha");
					bgStroke.weight = borderThickness;
					bgStroke.alpha = getStyle("borderAlpha");
					bgStroke.color = getStyle("borderColor");
					/*
					bgShadow.blurX = dropShadowBlur;
					bgShadow.blurY = dropShadowBlur;
					bgShadow.distance = dropShadowDistance;
					*/
					background.radiusX = cornerRadius;
					background.radiusY = cornerRadius;
					hostComponent.labelDisplay.setStyle ( 'paddingLeft', margin );
					hostComponent.labelDisplay.setStyle ( 'paddingTop', margin );
					hostComponent.labelDisplay.setStyle ( 'paddingRight', margin );
					hostComponent.labelDisplay.setStyle ( 'paddingBottom', margin );
				}
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>        
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
		<s:State name="closed" stateGroups="closedGroup"/>
		<s:State name="disabledAndClosed" stateGroups="closedGroup"/>
	</s:states>
	
	<!-- Transitions for open and close
	<s:transitions>
	<s:Transition fromState="closed" toState="normal" autoReverse="true">
	<s:Fade duration="150" target="{chrome}"/>
	</s:Transition>
	
	<s:Transition fromState="disabledAndClosed" toState="disabled" autoReverse="true">
	<s:Fade duration="150" target="{chrome}"/>
	</s:Transition>
	
	<s:Transition fromState="normal" toState="closed" autoReverse="true">
	<s:Fade duration="150" target="{chrome}"/>
	</s:Transition>
	
	<s:Transition fromState="disabled" toState="disabledAndClosed" autoReverse="true">
	<s:Fade duration="150" target="{chrome}"/>
	</s:Transition>
	</s:transitions> -->
	
	<!--- Defines the background and content group used by this skin. -->
	<s:Group
		id="chrome"
		left="0" right="0" top="0" bottom="0"
		visible.closedGroup="false"
		>
		
		<!--- Defines the appearance of the host class's background. -->
		<s:Rect
			id="background"
			left="0" right="0" top="0" bottom="0"
			>
			<!--
			<s:filters>
			<s:DropShadowFilter
			id="bgShadow"
			alpha="0.5"
			color="0x000000"
			/>
			</s:filters>
			-->
			<s:fill>
				<!--- @private -->
				<s:SolidColor
					id="bgFill"
					/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke
					id="bgStroke"
					joints="bevel"
					pixelHinting="true"
					/>
			</s:stroke>
		</s:Rect>
		
		<!--
		Note: Setting the minimum size to 0 here so that changes to the host component's
		size will not be thwarted by this skin part's minimum size.   This is a compromise,
		more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
		-->
		<!--- @copy spark.components.SkinnableContainer#contentGroup -->
		<s:Group
			id="contentGroup"
			left="0" right="0" top="0" bottom="0"
			minWidth="0" minHeight="0"
			>
		</s:Group>
	</s:Group>
	
</s:Skin>
