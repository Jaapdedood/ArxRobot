<?xml version="1.0" encoding="utf-8"?>
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:comp="components.*"
	xmlns:lo="layouts.*"
	creationComplete="_CreationCompleted()"
	addedToStage="_AddedToStage()"
	removedFromStage="_RemovedFromStage()"
	>
	<fx:Metadata>
		[Event(name="debug_clear", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.SandboxMouseEvent;
			
			import controllers.CameraManager;
			import controllers.SessionManager;
			
			public var triggerButton:DisplayObject;
			
			[Bindable]
			private var _camMgr:CameraManager;
			
			[Bindable]
			private var _sessionMgr:SessionManager;
			
			private function _Close ( ) : void
			{
				_sessionMgr.actionMenuOn = false;
			}
			
			private function _AddedToStage ( ) : void
			{
				stage.addEventListener ( MouseEvent.MOUSE_DOWN, _SandboxMouseDown );
				/*
				var doSandboxRoot:DisplayObject = systemManager.getSandboxRoot ( );
				doSandboxRoot.addEventListener ( MouseEvent.MOUSE_DOWN, _SandboxMouseDown );
				doSandboxRoot.addEventListener ( SandboxMouseEvent.MOUSE_DOWN_SOMEWHERE, _SandboxMouseDown );
				*/
			}
			
			private function _CreationCompleted ( ) : void
			{
				_sessionMgr = SessionManager.instance;
				_camMgr = CameraManager.instance;
			}
			
			private function _DebugClear ( ) : void
			{
				dispatchEvent ( new Event ( 'debug_clear' ) );
			}
			
			private function _ExitQuery ( ) : void
			{
				_sessionMgr.exitQuery ( );
			}
			
			private function _RemovedFromStage ( ) : void
			{
				stage.removeEventListener ( MouseEvent.MOUSE_DOWN, _SandboxMouseDown );
				/*
				var doSandboxRoot:DisplayObject = systemManager.getSandboxRoot ( );
				doSandboxRoot.removeEventListener ( MouseEvent.MOUSE_DOWN, _SandboxMouseDown );
				doSandboxRoot.removeEventListener ( SandboxMouseEvent.MOUSE_DOWN_SOMEWHERE, _SandboxMouseDown );
				*/
			}
			
			private function _SandboxMouseDown ( event:Event ) : void
			{
				var doTarget:DisplayObject = DisplayObject ( event.target );
				if ( !DisplayObjectContainer ( this ).contains ( doTarget ) )
				{
					if ( triggerButton != doTarget )
					{
						event.stopPropagation ( );
						callLater ( _Close );
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:Rect
		width="100%" height="100%"
		topLeftRadiusX="9" topLeftRadiusY="9"
		bottomLeftRadiusX="9" bottomLeftRadiusY="9"
		bottomRightRadiusX="9" bottomRightRadiusY="9"
		>
		<s:stroke>
			<s:SolidColorStroke
				color="{_sessionMgr.actionMenuBgColor}"
				/>
		</s:stroke>
		<s:fill>
			<s:SolidColor
				color="{_sessionMgr.actionMenuBgColor}" alpha="0.8"
				/>
		</s:fill>
	</s:Rect>
	<s:Group
		id="gpMenuBtns"
		width="{width}"
		>
		<s:layout>
			<lo:FlowLayout
				horizontalGap="0" verticalGap="0"
				/>
			<!--
			<lo:FlowLayout
				horizontalGap="4" verticalGap="4"
				paddingLeft="4" paddingRight="4"
				paddingTop="4" paddingBottom="4"
				/>
			-->
		</s:layout>
		<s:Button
			id="btnExit"
			styleName="navExit"
			visible="{_sessionMgr.osAllowsExit}"
			includeInLayout="{_sessionMgr.osAllowsExit}"
			click="_ExitQuery()"
			/>
		<s:Button
			id="btnSleepWake"
			styleName="{_sessionMgr.isSleeping?'navWake':'navSleep'}"
			click="_sessionMgr.sleepWakeToggle()"
			/>
		<comp:SettingsMenu
			id="mnSettings"
			/>
		<comp:OpModesMenu
			id="mnOpModes"
			/>
		<comp:RobotCamInfo
			id="rcInfo"
			visible="{_camMgr.enabled}"
			includeInLayout="{_camMgr.enabled}"
			/>
		<s:VGroup
			gap="4"
			horizontalAlign="center"
			verticalAlign="bottom"
			>
			<s:Label
				paddingTop="4"
				styleName="toggleLabel"
				text="{resourceManager.getString('default','expert_mode_btn_label')}"
				verticalAlign="bottom"
				/>
			<s:ToggleSwitch
				id="btnExpert"
				change="_sessionMgr.expertModeToggle()"
				selected="{_sessionMgr.expertModeOn}"
				/>
		</s:VGroup>
		<comp:HelpLabel
			id="tipExpert"
			visible="{!_sessionMgr.expertModeOn}"
			includeInLayout="{!_sessionMgr.expertModeOn}"
			buttonPinVertical="bottom"
			popupPinVertical="top"
			resourceNameOrText="expert_mode_btn_tip"
			/>
		<s:VGroup
			gap="4"
			horizontalAlign="center"
			verticalAlign="bottom"
			visible="{_sessionMgr.expertModeOn}"
			includeInLayout="{_sessionMgr.expertModeOn}"
			>
			<s:Label
				paddingTop="4"
				styleName="toggleLabel"
				text="{resourceManager.getString('default','debug_vis_btn_label')}"
				verticalAlign="bottom"
				/>
			<s:ToggleSwitch
				id="btnDebugVis"
				selected="@{_sessionMgr.debugVisible}"
				/>
		</s:VGroup>
		<s:VGroup
			gap="4"
			horizontalAlign="center"
			verticalAlign="bottom"
			visible="{_sessionMgr.debugVisible}"
			includeInLayout="{_sessionMgr.debugVisible}"
			>
			<s:Label
				paddingTop="4"
				styleName="toggleLabel"
				text="{resourceManager.getString('default','debug_btn_label')}"
				verticalAlign="bottom"
				/>
			<s:ToggleSwitch
				id="btnDebug"
				selected="@{_sessionMgr.debugOn}"
				/>
		</s:VGroup>
		<s:Button
			id="btnDebugClr"
			styleName="nav"
			visible="{_sessionMgr.debugVisible}"
			includeInLayout="{_sessionMgr.debugVisible}"
			label="{resourceManager.getString('default','debug_clear_btn_label')}"
			click="_DebugClear()"
			/>
	</s:Group>
</s:Group>
