package utils
{
	import controllers.CameraManager;
	
	/**
	 * Control connector for the Peer to Peer operational mode.
	 */
	[Bindable]
	public class ControlConnectorPP extends ControlConnector
	{
		/**
		 * @copy ControlConnectorPP
		 */
		public function ControlConnectorPP ( )
		{
			super ( );
		}
		
		override public function dismiss ( ) : void
		{
			if ( _camMgr )
			{
				// _camMgr.removeEventListener ( CameraManager.CAMERA_CONFIG_CHANGED, _AvOutConfigUpdate );
				_camMgr.enabled = false;
				_camMgr = null;
			}
			
			super.dismiss ( );
		}
		
		/**
		 * Called automatically by superclass during instantiation,
		 * but may also be called manually to reactivate
		 * if object was previously dismissed.
		 * Subclass overrides must call super.init().
		 */
		override public function init ( ) : void
		{
			super.init ( );
			
			_camMgr = CameraManager.instance;
			// _camMgr.addEventListener ( CameraManager.CAMERA_CONFIG_CHANGED, _AvOutConfigUpdate );
			_camMgr.enabled = true;
		}
		
		
		// PRIVATE PROPERTIES
		
		private var _camMgr:CameraManager;
	}
}