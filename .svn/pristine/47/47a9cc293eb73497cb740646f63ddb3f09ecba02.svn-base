package vo
{
	import com.smartfoxserver.v2.entities.data.ISFSObject;
	import com.smartfoxserver.v2.entities.data.SFSObject;
	
	import flash.utils.ByteArray;

	public class ArduinoCommand
	{
		// PUBLIC PROPERTIES AND GET/SET METHOD GROUPS
		
		public function get boolean ( ) : Boolean
		{
			if ( !_ReadyToReadValue ( 1 ) )
				return false;
			return _commandBytes.readBoolean ( );
		}
		public function set boolean ( val:Boolean ) : void
		{
			if ( _ReadyToWriteValue ( ) )
				_commandBytes.writeBoolean ( val );
		}
		
		public function get byte ( ) : int
		{
			if ( !_ReadyToReadValue ( 1 ) )
				return 0;
			return _commandBytes.readByte ( );
		}
		public function set byte ( val:int ) : void
		{
			if ( _ReadyToWriteValue ( ) )
				_commandBytes.writeByte ( val );
		}
		
		/**
		 * Entire command ByteArray to be sent to Arduino, or status received
		 * from Arduino, including commandId and any argument bytes
		 */
		public function get commandBytes ( ) : ByteArray
		{
			return _commandBytesClone ( );
		}
		public function set commandBytes ( val:ByteArray ) : void
		{
			_commandString = '';
			_commandBytes = val;
		}
		
		/**
		 * Command identifier byte
		 */
		[Transient]
		public function get commandId ( ) : uint
		{
			if ( !_commandBytes || _commandBytes.length < 1 )
				return 0;
			return _commandBytes [ 0 ];
		}
		public function set commandId ( val:uint ) : void
		{
			if ( !_commandBytes )
				_commandBytes = new ByteArray ( );
			_commandString = '';
			_commandBytes [ 0 ] = val;
		}
		
		/**
		 * Command identifier byte as hex string
		 */
		public function get commandIdHex ( ) : String
		{
			var s:String = commandId.toString ( 16 ).toUpperCase ( );
			while ( s.length < 2 )
			{
				s = '0' + s;
			}
			return '0x' + s;
		}
		
		/**
		 * Command identifier byte as hex (dec) string
		 */
		public function get commandIdHexDec ( ) : String
		{
			var uId:uint = commandId;
			var s:String = uId.toString ( 16 ).toUpperCase ( );
			while ( s.length < 2 )
			{
				s = '0' + s;
			}
			return '0x' + s + ' (' + uId.toString() + ')';
		}
		
		public function get commandString ( ) : String
		{
			if ( _commandString.length < 1 )
			{
				if ( _commandBytes != null )
				{
					var iLim:int = _commandBytes.length;
					if ( iLim > 0 )
					{
						_commandString += _commandBytes [ 0 ];
						for ( var i:int=1; i<iLim; i++ )
						{
							_commandString += ',' + _commandBytes [ i ];
						}
					}
				}
			}
			return _commandString;
		}
		
		public function get double ( ) : Number
		{
			if ( !_ReadyToReadValue ( 8 ) )
				return NaN;
			return _commandBytes.readDouble ( );
		}
		public function set double ( value:Number ) : void
		{
			if ( _ReadyToWriteValue ( ) )
				_commandBytes.writeDouble ( value );
		}
		
		public function get short ( ) : int
		{
			if ( !_ReadyToReadValue ( 2 ) )
				return 0;
			return _commandBytes.readShort ( );
		}
		public function set short ( val:int ) : void
		{
			if ( _ReadyToWriteValue ( ) )
				_commandBytes.writeShort ( val );
		}
		
		public function get unsignedByte ( ) : uint
		{
			if ( !_ReadyToReadValue ( 1 ) )
				return 0;
			return _commandBytes.readUnsignedByte ( );
		}
		public function set unsignedByte ( val:uint ) : void
		{
			if ( _ReadyToWriteValue ( ) )
				_commandBytes.writeByte ( val );
		}
		
		public function get unsignedShort ( ) : uint
		{
			if ( !_ReadyToReadValue ( 2 ) )
				return 0;
			return _commandBytes.readUnsignedShort ( );
		}
		public function set unsignedShort ( val:uint ) : void
		{
			if ( _ReadyToWriteValue ( ) )
				_commandBytes.writeShort ( val );
		}
		
		// CONSTRUCTOR
		
		public function ArduinoCommand ( commandBytes:ByteArray = null )
		{
			_commandBytes = commandBytes;
		}
		
		// OTHER PUBLIC METHODS
		
		/**
		 * @return SFSObject containing command byte array
		 */
		public function toSFSObject ( ) : ISFSObject
		{
			var sfso:ISFSObject = new SFSObject ( );
			sfso.putByteArray ( 'b', _commandBytes );
			return sfso;
		}
		
		public function writeValueBytes ( byteArray:ByteArray, byteCount:uint ) : Boolean
		{
			if ( byteArray.bytesAvailable < byteCount )
				return false;
			if ( _commandBytes != null && _commandBytes.length > 0 )
				byteArray.readBytes ( _commandBytes, 1, byteCount );
			return true;
		}
		
		// PUBLIC STATIC METHODS
		
		public static function newFromSFSObject ( sfso:ISFSObject ) : ArduinoCommand
		{
			return new ArduinoCommand ( sfso.getByteArray ( 'b' ) );
		}

		// PROTECTED PROPERTIES AND GET/SET METHOD GROUPS
		
		protected var _commandBytes:ByteArray;
		protected var _commandString:String = '';
		
		// PROTECTED METHODS
		
		protected function _commandBytesClone ( ) : ByteArray
		{
			_commandBytes.position = 0;
			var ba:ByteArray = new ByteArray ( );
			ba.writeBytes ( _commandBytes );
			return ba;
		}
		
		protected function _commandStringClear ( ) : void
		{
			_commandString = '';
		}
		
		// PRIVATE METHODS
		
		// validates whether enough bytes are available, and sets position for read
		private function _ReadyToReadValue ( dataLength:int ) : Boolean
		{
			if ( !_commandBytes )
				return false;
			
			if ( _commandBytes.length > dataLength )
			{
				_commandBytes.position = 1;
				return true;
			}
			
			return false;
		}
		
		private function _ReadyToWriteValue ( ) : Boolean
		{
			if ( !_commandBytes )
				return false;
			
			if ( _commandBytes.length < 1 )
				return false;
			
			_commandString = '';
			_commandBytes.position = 1;
			return true;
		}
		
	}
}