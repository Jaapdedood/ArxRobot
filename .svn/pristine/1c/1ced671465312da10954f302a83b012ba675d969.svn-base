package vo
{
	import flash.utils.ByteArray;
	
	import mx.core.ClassFactory;
	import components.*;
	
	[Bindable]
	/**
	 * Represents an Arduino EEPROM item.
	 */
	public class ArduinoEeprom
	{
		// CONSTANTS
		
		private static const __RESOURCE_ROOT:String = 'eeprom_';
		private static const __TYPES:Vector.<String> = new <String> [ 'bool', 'byte', 'double', 'short', 'ubyte', 'ushort' ];
		
		// CONSTRUCTOR
		
		/**
		 * @param address uint - EEPROM address, as a uint representing an unsigned short
		 * @param byteCount uint - Number of bytes required to store the data, as a uint representing an unsigned byte
		 * @param id String - Somewhat human-readable unique ID used in SmartFox variables, locale resource names, and documentation
		 * @param type String - One of the abbreviations [ 'bool', 'byte', 'double', 'short', 'ubyte', 'ushort' ]
		 * used in eeprom.json config file to represent data types written into ByteArray form stored in EEPROM
		 * @param value * - Data stored in this EEPROM item
		 * @param reportable Boolean - True if this item should be reported to SmartFox Server as user variable
		 */
		public function ArduinoEeprom ( address:uint, byteCount:uint, id:String, type:String, value:*, reportable:Boolean )
		{
			_sId = id;
			_ba = new ByteArray ( );
			_ba.writeShort ( address );
			if ( __TYPES.indexOf ( type ) < 0 )
			{
				_sType = 'ubyte';
				_ba.writeByte ( 1 );
			}
			else
			{
				_sType = type;
				_ba.writeByte ( byteCount );
			}
			_bReportable = reportable;
			this.value = value;
			_bInited = true;
		}
		
		// PUBLIC METHODS IMPLEMENTING IArduinoEeprom
		
		/**
		 * EEPROM address, as a uint representing an unsigned short
		 */
		public function get address ( ) : uint
		{
			_ba.position = 0;
			return _ba.readUnsignedShort ( );
		}
		
		/**
		 * Number of bytes required to store the data, as a uint representing an unsigned byte
		 */
		public function get byteCount ( ) : uint
		{
			return _ba [ 2 ];
		}
		
		/**
		 * True if value has been changed by user after initialization
		 */
		public function get changed ( ) : Boolean
		{
			return _bChanged;
		}
		
		/**
		 * Somewhat human-readable unique ID used for lookup, SmartFox variables, locale resource names, and documentation
		 */
		public function get id ( ) : String
		{
			return _sId;
		}
		
		/**
		 * ByteArray to send to Arduino to read this EEPROM item
		 */
		public function get readCommand ( ) : ByteArray
		{
			var ba:ByteArray = new ByteArray ( );
			ba.writeByte ( 0x6 );
			ba.writeBytes ( _ba, 0, 3 );
			return ba;
		}
		
		/**
		 * Item renderer for configuration view
		 */
		public function get itemRenderer ( ) : ClassFactory
		{
			if ( _cfRenderer == null )
			{
				switch ( _sType )
				{
					case 'ushort':
						_cfRenderer = new ClassFactory ( components.EepromItemRendererShortUnsigned );
						break;
					case 'short':
						_cfRenderer = new ClassFactory ( components.EepromItemRendererByte );
						break;
					case 'bool':
						_cfRenderer = new ClassFactory ( components.EepromItemRendererBoolean );
						break;
					case 'ubyte':
						_cfRenderer = new ClassFactory ( components.EepromItemRendererByteUnsigned );
						break;
					case 'byte':
						_cfRenderer = new ClassFactory ( components.EepromItemRendererByte );
						break;
					default:
						// double
						_cfRenderer = new ClassFactory ( components.EepromItemRendererDouble );
						break;
				}
			}
			return _cfRenderer;
		}
		
		/**
		 * Flag for item that should be reported to SmartFox Server as user variable
		 */
		public function get reportable ( ) : Boolean
		{
			return _bReportable;
		}
		
		/**
		 * Name passed to resourceManager.getString() to read localized label string from locale properties.  Derived from ID string.
		 */
		public function get resource ( ) : String
		{
			return __RESOURCE_ROOT + _sId;
		}
		
		/**
		 * One of the abbreviations [ 'bool', 'byte', 'double', 'short', 'ubyte', 'ushort' ]
		 * used in eeprom.json config file to represent data types written into ByteArray form stored in EEPROM
		 */
		public function get type ( ) : String
		{
			return _sType;
		}
		
		public function get value ( ) : *
		{
			return this [ _sType ];
		}
		
		public function set value ( newValue:* ) : void
		{
			if ( _bInited )
			{
				if ( this [ _sType ] != newValue )
				{
					_bChanged = true;
					this [ type ] = newValue;
				}
			}
			else
			{
				this [ type ] = newValue;
			}
		}
		
		/**
		 * ByteArray to send to Arduino to write this EEPROM item
		 */
		public function get writeCommand ( ) : ByteArray
		{
			var ba:ByteArray = new ByteArray ( );
			ba.writeByte ( 0x7 );
			ba.writeBytes ( _ba );
			return ba;
		}
		
		/**
		 * Sets value from next available bytes in supplied byte array.
		 * @param byteArray reference to incoming byte array
		 * @return true if there were sufficient bytes available, false if not
		 */
		public function setValueFromByteArray ( byteArray:ByteArray ) : Boolean
		{
			if ( byteArray.bytesAvailable < byteCount )
				return false;
			
			byteArray.readBytes ( _ba, 3, byteCount );
			return true;
		}
		
		// PROTECTED METHODS
		
		protected function get bool ( ) : Boolean
		{
			if ( !_ReadyToReadValue ( ) )
				return false;
			return _ba.readBoolean ( );
		}
		
		protected function set bool ( value:Boolean ) : void
		{
			_ba.position = 3;
			_ba.writeBoolean ( value );
		}
		
		protected function get byte ( ) : int
		{
			if ( !_ReadyToReadValue ( ) )
				return 0;
			return _ba.readByte ( );
		}
		
		protected function set byte ( value:int ) : void
		{
			_ba.position = 3;
			_ba.writeByte ( value );
		}
		
		protected function get short ( ) : int
		{
			if ( !_ReadyToReadValue ( ) )
				return 0;
			return _ba.readShort ( );
		}
		
		protected function set short ( value:int ) : void
		{
			_ba.position = 3;
			_ba.writeShort ( value );
		}
		
		protected function get double ( ) : Number
		{
			if ( !_ReadyToReadValue ( ) )
				return NaN;
			return _ba.readDouble ( );
		}
		
		protected function set double ( value:Number ) : void
		{
			_ba.position = 3;
			_ba.writeDouble ( value );
		}
		
		protected function get ubyte ( ) : uint
		{
			if ( !_ReadyToReadValue ( ) )
				return 0;
			return _ba.readUnsignedByte ( );
		}
		
		protected function set ubyte ( value:uint ) : void
		{
			_ba.position = 3;
			_ba.writeByte ( value );
		}
		
		protected function get ushort ( ) : uint
		{
			if ( !_ReadyToReadValue ( ) )
				return 0;
			return _ba.readUnsignedShort ( );
		}
		
		protected function set ushort ( value:uint ) : void
		{
			_ba.position = 3;
			_ba.writeShort ( value );
		}
		
		// PRIVATE PROPERTIES
		
		private var _ba:ByteArray;
		private var _bChanged:Boolean = false;
		private var _bInited:Boolean = false;
		private var _bReportable:Boolean;
		private var _cfRenderer:ClassFactory;
		private var _sId:String;
		private var _sType:String;
		
		// PRIVATE METHODS
		
		// validates whether enough bytes are available, and sets position
		private function _ReadyToReadValue ( ) : Boolean
		{
			if ( _ba.length < 3 )
				return false;
			_ba.position = 3;
			if ( _ba.bytesAvailable <  _ba [ 2 ] )
				return false;
			return true;
		}
		
	}
}