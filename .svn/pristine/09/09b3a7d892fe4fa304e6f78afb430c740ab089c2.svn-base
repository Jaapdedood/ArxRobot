package vo
{
	import com.smartfoxserver.v2.entities.data.ISFSObject;
	
	import flash.utils.ByteArray;
	
	/**
	 * Used to send and store waypoint commands that require latitude/longitude and adminId.
	 * <p>Latitude and longitude are stored as 64-bit double precision floating point values
	 * (the native Number data type of AS3), and the default commandBytes provided by
	 * superclass ArduinoCommand thus includes 8 bytes for each.
	 * <p>This subclass also adds two additional command formats that use 32-bit values:
	 * <ul><li><b>commandBytesSinglePrecision</b> uses single precision floats, which are standard for most Arduinos</li>
	 * <li><b>commandBytesIntegerDmDegrees</b> uses 32-bit integer values calculated as decimicrodegrees
	 * (Number value multiplied by 10,000,000 and rounded to integer) which provides approximately
	 * 1000 times the precision of the 32-bit float version</li></ul>
	 */
	// Note: Superclass implements IExternalizable.
	public class WaypointCoordinates extends ArduinoCommand
	{
		// PUBLIC PROPERTIES AND GET/SET METHOD GROUPS
		
		/**
		 * <b>commandBytesIntegerDmDegrees</b> returns a command ByteArray incorporating
		 * 32-bit integer values calculated as decimicrodegrees
		 * (Number value multiplied by 10,000,000 and rounded to integer).
		 * This provides precision down to about a centimeter, as opposed to the
		 * 11 meters of <b>commandBytesSinglePrecision</b>.<br />
		 * REFERENCE: http://sloblog.io/~pdc/kbGgQRBcYsk/latitude-and-longitude-in-32-bits
		 */
		public function get commandBytesIntegerDmDegrees ( ) : ByteArray
		{
			var ba:ByteArray = new ByteArray ( );
			ba.writeBytes ( _commandBytes, 0, 1 );
			_commandBytes.position = 1;
			ba.writeInt ( int ( Math.round ( 10000000.0 * _commandBytes.readDouble() ) ) ); // lat
			ba.writeInt ( int ( Math.round ( 10000000.0 * _commandBytes.readDouble() ) ) ); // lng
			ba.writeBytes ( _commandBytes, 17, 1 );
			return ba;
		}
		
		/**
		 * <b>commandBytesSinglePrecision</b> returns a command ByteArray incorporating
		 * 32-bit float values, which thus limits precision to roughly 11 meters.<br />
		 * REFERENCE: http://sloblog.io/~pdc/kbGgQRBcYsk/latitude-and-longitude-in-32-bits
		 */
		public function get commandBytesSinglePrecision ( ) : ByteArray
		{
			var ba:ByteArray = new ByteArray ( );
			ba.writeBytes ( _commandBytes, 0, 1 );
			_commandBytes.position = 1;
			ba.writeFloat ( _commandBytes.readDouble() ); // lat
			ba.writeFloat ( _commandBytes.readDouble() ); // lng
			ba.writeBytes ( _commandBytes, 17, 1 );
			return ba;
		}
		
		/**
		 * Latitude as Number (double precision floating point)
		 */
		public function get latitude ( ) : Number
		{
			return getDoubleAt ( 1 );
		}
		public function set latitude ( value:Number ) : void
		{
			setDoubleAt ( value, 1 );
		}
		
		/**
		 * Longitude as Number (double precision floating point)
		 */
		public function get longitude ( ) : Number
		{
			return getDoubleAt ( 9 );
		}
		public function set longitude ( value:Number ) : void
		{
			setDoubleAt ( value, 9 );
		}
		
		/**
		 * Admin ID
		 */
		public function get adminId ( ) : uint
		{
			return getUnsignedByteAt ( 17 );
		}
		public function set adminId ( value:uint ) : void
		{
			setUnsignedByteAt ( value, 17 );
		}
		
		
		// CONSTRUCTOR
		
		/**
		 * If do not have commandBytes, call static method <strong>newFromParameters</strong>
		 * or <strong>newFromSFSObject</strong>, as appropriate
		 * @param commandBytes
		 */
		public function WaypointCoordinates ( commandBytes:ByteArray = null )
		{
			super ( commandBytes );
		}
		
		
		// OTHER PUBLIC METHODS
		
		public function toString ( ) : String
		{
			return '{latitude: ' + latitude + ', longitude: ' + longitude + ',  adminId: ' + adminId + '}';
		}
		
		
		// PUBLIC STATIC METHODS
		
		/**
		 * @param commandId WAYPOINT_COORD or WAYPOINT_MOVE
		 * @param latitude
		 * @param longitude
		 * @param adminId If a value between 0 and 255 is not provided,
		 * a sequential one in that range will be assigned.
		 */
		public static function NewFromParameters (
			commandId:uint = WAYPOINT_COORD,
			lat:Number = 0,
			lng:Number = 0,
			adminId:int = -1
		) : WaypointCoordinates
		{
			var ba:ByteArray = new ByteArray ( );
			ba.writeByte ( commandId );
			ba.writeDouble ( lat );
			ba.writeDouble ( lng );
			ba.writeByte ( __AdminIdValidate ( adminId ) );
			return new WaypointCoordinates ( ba );
		}
		
		public static function NewFromSFSObject ( sfso:ISFSObject ) : WaypointCoordinates
		{
			return new WaypointCoordinates ( sfso.getByteArray ( 'b' ) );
		}
		
		
		// PRIVATE STATIC PROPERTIES
		
		private static var __uNextAdminId:uint = 0;
		
		
		// PRIVATE STATIC METHODS
		
		private static function __AdminIdValidate ( id:int ) : uint
		{
			if ( id >= 0 && id <= 255 )
			{
				return uint ( id ); // return
			}
			
			// if get here, need to assign the next ID in sequence
			var uId:uint = __uNextAdminId++;
			if ( __uNextAdminId > 255 )
			{
				__uNextAdminId = 0;
			}
			return uId;
		}
		
	}
}
